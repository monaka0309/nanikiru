<%= form_with(model: post, local: true, data: { turbo: false }) do |form| %>
  <% if post.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(post.errors.count, "error") %> prohibited this post from being saved:</h2>
      <ul>
        <% post.errors.full_messages.each do |message| %>
          <li><%= message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-4">
    <%= form.label :content, "あなたの考え" %>
    <%= form.text_area :content, class: 'shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight bg-violet-50' %>
  </div>

  <div class="mb-4">
    <%= form.label :image, "画像" %>
    <%= form.file_field :image, class: 'shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight', id: 'post_image' %>
    <div id="image-preview" class="mt-4">
      <% if post.image? %>
        <%= image_tag post.image.url, class: 'rounded-lg max-w-full h-auto' %>
      <% end %>
    </div>
  </div>

  <!-- モーダルのトリガーボタン -->
  <button id="openModalButton" class="px-4 py-2 text-white bg-blue-500 hover:bg-blue-700 rounded">牌の選択肢を表示</button>
  <!-- モーダル -->
  <div id="modal" class="fixed inset-0 bg-black bg-opacity-50 hidden justify-center items-center" style="display:none;">
    <div class="bg-white rounded-lg p-5">
      <!-- モーダルコンテンツ -->
      <div class="text-center">
        <h2 class="mb-4">牌の選択肢を選んでください。</h2>

          <!-- 画像を表示 -->
          <% @tile_images.each do |filename| %>
            <%= image_tag "#{filename}", class: 'mx-2', size: '60x90' %>
          <% end %>
        <button id="closeModalButton" class="px-4 py-2 bg-red-500 hover:bg-red-700 text-white rounded">閉じる</button>
      </div>
    </div>
  </div>





  <%= form.label :牌の選択肢の設定, class: 'text-gray-600' %><br>
    <label for="modal_1" class="btn btn-neutral modal-button">投票してもらう選択肢を選ぶ</label><br>
    （※最大4つまで）
    <div id="selected-images" class="mb-6 flex">
      <% post.selected_images.each do |image_url| %>
        <%= image_tag image_url, class: "mx-2 my-2", style: "width: 1.5cm; height: 2cm;" %>
        <%= form.hidden_field :selected_images, multiple: true, value: image_url %>
      <% end %>
    </div>

    <!-- リセットボタンを追加 -->
    <button type="button" id="reset-selection" class="btn btn-outline">選択をリセット</button>

    <!-- モーダル -->
    <input type="checkbox" id="modal_1" class="modal-toggle" />
    <div class="modal" role="dialog">
        <div class="modal-box w-full max-w-md sm:max-w-sm lg:max-w-[600px] p-4">


            <!-- カードのコンテナ -->
            <div class="card bg-neutral text-neutral-content w-full bg-blue-900 p-4 rounded-lg">
                <div class="card-body items-center text-center">
                    <!-- カードのタイトル -->
                    <h2 class="card-title">牌の選択肢を選んでください。</h2>

                    <!-- 画像を横並びで表示するためのコンテナ -->
                    <div class="grid grid-cols-5 flex flex-wrap items-center">
                    
                    </div>
                    <!-- カードのアクション（ボタン） -->
                    <div class="card-actions justify-end">
                        <label for="modal_1" class="btn btn-active btn-neutral mt-5">閉じる</label>
                    </div>
                </div>
            </div>
        </div>
    </div>


  <div class="actions my-4">
    <%= form.submit post.new_record? ? '投稿する' : '更新する', class: 'bg-blue-900 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded' %>
  </div>
<% end %>





<script>
  document.addEventListener("turbo:load", function() {
    // 変数定義
    // モーダルを開くボタン
    var openModalButton = document.getElementById('openModalButton');
    
    // モーダルを閉じるボタン
    var closeModalButton = document.getElementById('closeModalButton');
    
    // モーダル本体
    var modal = document.getElementById('modal');
    
    
    // モーダルを開く
    openModalButton.addEventListener('click', function() {
      modal.style.display = 'flex';
    });
    
    // モーダルを閉じる
    closeModalButton.addEventListener('click', function() {
      modal.style.display = 'none';
    });
  

  
  const selectedImagesArea = document.getElementById('selected-images');

  // リセットボタンのクリックイベント
  const resetButton = document.getElementById('reset-selection');
  if (resetButton) {
    resetButton.addEventListener('click', function() {
      resetSelection();
    });
  }

  function resetSelection() {
    // 選択された画像をクリア
    const selectedImagesArea = document.getElementById('selected-images');
    selectedImagesArea.innerHTML = '';

    // 隠しフォームフィールドをクリア
    document.querySelectorAll("input[name='post[selected_images][]']").forEach(input => {
      input.remove();
    });
  }

  // 既存の選択画像クリックイベントにリセット機能を追加
  document.querySelectorAll('.selected-image').forEach(function(img) {
    img.addEventListener('click', function() {
      // 選択を解除し、隠しフォームフィールドを削除
      this.remove();
      document.querySelector("input[value='" + this.src + "']").remove();
    });
  });


  function addSelectedImage(imageSrc) {
      const imageArea = document.getElementById('selected-images');
      const existingImages = imageArea.getElementsByTagName('img');


      // 既に選択されている画像のURLを配列に格納
      let existingImageUrls = [];
      for (let i = 0; i < existingImages.length; i++) {
          existingImageUrls.push(existingImages[i].src);
      }

      // 選択された画像が既に存在するかチェック
      if (existingImageUrls.includes(imageSrc)) {

          alert('同じ画像は選択できません。');
          return;
      }

      // 選択された画像の枚数が4枚未満であることを確認
      if (existingImages.length >= 4) {
          alert('画像の最大枚数は4枚です。');
          return;
      }

      // 隠しフォームフィールドを作成して値を設定
      const input = document.createElement('input');
      input.type = 'hidden';
      input.name = 'post[selected_images][]';
      input.value = imageSrc;
      document.querySelector('form').appendChild(input);

      // 画像を画面に表示
      const img = document.createElement('img');
      img.src = imageSrc;
      img.style.width = '1.5cm';
      img.style.height = '2cm';
      img.classList.add('mx-2', 'my-2');
      imageArea.appendChild(img);

      // モーダルを閉じる
      document.getElementById('modal_1').checked = false;
  }

      // モーダル内のすべての画像に対してイベントリスナーを設定
      document.querySelectorAll('.modal img').forEach(function(img) {
          img.addEventListener('click', function() {
              addSelectedImage(this.src); // クリックされた画像を処理
          });
      });
  });

</script>